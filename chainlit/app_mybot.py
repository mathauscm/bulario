import chainlit as cl
from openai import AsyncOpenAI
import os
from dotenv import load_dotenv
from tools.consultar_bulas import buscar_medicamento

# Carregar vari√°veis do .env
load_dotenv()

# Inicializar cliente OpenAI
client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Mensagem de apresenta√ß√£o do chatbot de medicamentos
introduction = (
    "ü§ñ **Bem-vindo ao Chatbot de Medicamentos!** üíä\n\n"
    "Sou seu assistente especializado em informa√ß√µes sobre medicamentos. "
    "**Com este chatbot, voc√™ pode:**\n"
    "- **Consultar medicamentos**: Informa√ß√µes detalhadas incluindo composi√ß√£o completa\n"
    "- **Composi√ß√£o detalhada**: Princ√≠pios ativos e lista completa de excipientes\n"
    "- **Indica√ß√µes terap√™uticas**: Para que serve cada medicamento\n"
    "- **Contraindica√ß√µes**: Quando n√£o usar o medicamento\n"
    "- **Posologia**: Como administrar corretamente\n"
    "- **Rea√ß√µes adversas**: Efeitos colaterais por frequ√™ncia\n"
    "- **Informa√ß√µes t√©cnicas**: Armazenamento, validade e dados regulat√≥rios\n\n"
    "**Exemplos do que voc√™ pode perguntar:**\n"
    "- *\"Me fale sobre ibuprofeno\"*\n"
    "- *\"Quais s√£o os excipientes do omeprazol?\"*\n"
    "- *\"Rea√ß√µes adversas da sepurin\"*\n"
    "- *\"Quais s√£o os excipientes da macrodantina?\"*\n\n"
    " **Importante**: As informa√ß√µes fornecidas s√£o apenas para fins educativos. "
    "Sempre consulte um profissional de sa√∫de antes de usar qualquer medicamento.\n\n"
    "Digite sua pergunta sobre medicamentos para come√ßar!"
)

# Instru√ß√µes do sistema para o comportamento da IA
system_prompt = (
    "Voc√™ √© um assistente especializado em informa√ß√µes sobre medicamentos. "
    "Seu foco principal √© fornecer informa√ß√µes precisas e educativas sobre medicamentos "
    "atrav√©s de consultas a uma base de dados especializada.\n\n"
    "INSTRU√á√ïES IMPORTANTES:\n"
    "- Sempre forne√ßa informa√ß√µes completas: composi√ß√£o, indica√ß√µes, contraindica√ß√µes, posologia, rea√ß√µes adversas\n"
    "- SEMPRE inclua avisos de seguran√ßa sobre consultar profissionais de sa√∫de\n"
    "- As informa√ß√µes de posologia s√£o apenas educativas - sempre oriente a consultar um profissional\n"
    "- Seja claro que suas informa√ß√µes s√£o apenas para fins informativos\n"
    "- DESTAQUE informa√ß√µes importantes como contraindica√ß√µes e rea√ß√µes adversas graves\n"
    "- Responda sempre em portugu√™s brasileiro de forma clara e profissional\n"
    "- Seja cordial, respons√°vel e educativo\n"
    "- Se n√£o encontrar informa√ß√µes sobre um medicamento espec√≠fico, sugira alternativas ou oriente a consultar um profissional\n\n"
    "Enfatize sempre a import√¢ncia de consultar profissionais de sa√∫de."
)

@cl.on_chat_start
async def start():
    await cl.Message(content=introduction).send()

@cl.on_message
async def main(message: cl.Message):
    user_message = message.content.lower()
    
    # Verificar se √© uma consulta sobre medicamento
    medicamento_keywords = [
        'medicamento', 'remedio', 'comprimido', 'capsula', 'xarope', 
        'pomada', 'creme', 'gel', 'solu√ß√£o', 'gotas', 'injetavel',
        'ibuprofeno', 'paracetamol', 'dipirona', 'omeprazol', 'amoxicilina',
        'composi√ß√£o', 'indica√ß√£o', 'contraindica√ß√£o', 'posologia', 'dose',
        'efeito colateral', 'rea√ß√£o adversa', 'bula', 'princ√≠pio ativo'
    ]
    
    is_medicine_query = any(keyword in user_message for keyword in medicamento_keywords)
    
    # Mostrar que est√° processando
    msg = cl.Message(content="")
    await msg.send()
    
    try:
        # Se for consulta sobre medicamento, tentar buscar informa√ß√µes primeiro
        medicine_info = ""
        if is_medicine_query:
            try:
                # Extrair poss√≠vel nome do medicamento da mensagem
                words = message.content.split()
                for word in words:
                    if len(word) > 3:  # Palavras com mais de 3 caracteres
                        result = buscar_medicamento(word.lower())
                        if result and 'erro' not in result.lower():
                            medicine_info = f"\n\nINFORMA√á√ïES DA BASE DE DADOS:\n{result}\n\n"
                            break
            except Exception as e:
                print(f"Erro ao consultar medicamento: {e}")
        
        # Preparar contexto com informa√ß√µes do medicamento se encontradas
        context = system_prompt
        if medicine_info:
            context += f"\n\nUse as seguintes informa√ß√µes espec√≠ficas do medicamento para complementar sua resposta:\n{medicine_info}"
        
        # Fazer chamada para OpenAI
        stream = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": context},
                {"role": "user", "content": message.content}
            ],
            stream=True,
            temperature=0.7
        )
        
        # Stream da resposta
        async for chunk in stream:
            if chunk.choices[0].delta.content:
                await msg.stream_token(chunk.choices[0].delta.content)
        
        await msg.update()
        
    except Exception as e:
        await cl.Message(
            content=f"Erro ao processar sua solicita√ß√£o: {str(e)}\n\n"
                   "Tente novamente ou reformule sua pergunta."
        ).send()